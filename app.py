import streamlit as st
import librosa
import numpy as np
import joblib
import matplotlib.pyplot as plt
import librosa.display
import pandas as pd
from collections import Counter # M·ªöI: Th√™m th∆∞ vi·ªán Counter ƒë·ªÉ ƒë·∫øm phi·∫øu

# Load the trained model
model = joblib.load("model/genre_classifier.pkl")

# Genre labels
genres = ['blues', 'classical', 'country', 'disco', 'hiphop',
          'jazz', 'metal', 'pop', 'reggae', 'rock']

# Emojis for genres
genre_emojis = {
    'blues': 'üéº', 'classical': 'üéª', 'country': 'ü§†', 'disco': 'ü™©',
    'hiphop': 'üé§', 'jazz': 'üé∑', 'metal': 'ü§ò', 'pop': 'üéß',
    'reggae': 'üü¢', 'rock': 'üé∏'
}

# Page config
st.set_page_config(page_title="Music Genre Classifier", layout="centered")

st.title("üé∂ Music Genre Classifier")
st.markdown("K√©o & th·∫£ m·ªôt file `.wav`, t√¥i s·∫Ω ƒëo√°n th·ªÉ lo·∫°i c·ªßa n√≥ b·∫±ng c√°ch ph√¢n t√≠ch to√†n b·ªô b√†i h√°t!") # M·ªöI: C·∫≠p nh·∫≠t m√¥ t·∫£

# File uploader
file = st.file_uploader("üéµ Th·∫£ file `.wav` c·ªßa b·∫°n v√†o ƒë√¢y", type=["wav"], label_visibility="collapsed")

if file:
    with st.spinner("üîç Ph√¢n t√≠ch to√†n b·ªô audio... qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt l√∫c..."):
        # Audio preview
        st.audio(file, format='audio/wav')

        # =================================================================
        # M·ªöI: B·∫ÆT ƒê·∫¶U KH·ªêI LOGIC PH√ÇN T√çCH V√Ä B·ªé PHI·∫æU
        # =================================================================
        
        try:
            # T·∫£i to√†n b·ªô file audio
            y, sr = librosa.load(file, sr=None) # sr=None ƒë·ªÉ gi·ªØ nguy√™n t·∫ßn s·ªë l·∫•y m·∫´u g·ªëc

            # C√°c bi·∫øn cho vi·ªác c·∫Øt ƒëo·∫°n
            segment_duration = 30  # 30 gi√¢y m·ªói ƒëo·∫°n
            samples_per_segment = segment_duration * sr
            
            segment_predictions = []

            # L·∫∑p qua t·ª´ng ƒëo·∫°n 30 gi√¢y trong file audio
            for start_sample in range(0, len(y), samples_per_segment):
                end_sample = start_sample + samples_per_segment
                segment = y[start_sample:end_sample]

                # Ch·ªâ x·ª≠ l√Ω c√°c ƒëo·∫°n ƒë·ªß d√†i
                if len(segment) >= sr * 10: # Y√™u c·∫ßu ƒëo·∫°n d√†i √≠t nh·∫•t 10 gi√¢y
                    # Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng MFCC cho ƒëo·∫°n n√†y
                    mfcc = librosa.feature.mfcc(y=segment, sr=sr, n_mfcc=13)
                    mfcc_mean = np.mean(mfcc.T, axis=0).reshape(1, -1)

                    # D·ª± ƒëo√°n th·ªÉ lo·∫°i cho ƒëo·∫°n v√† l∆∞u l·∫°i
                    prediction = model.predict(mfcc_mean)[0]
                    segment_predictions.append(prediction)

            # N·∫øu c√≥ k·∫øt qu·∫£ d·ª± ƒëo√°n t·ª´ c√°c ƒëo·∫°n
            if segment_predictions:
                # B·ªè phi·∫øu: ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói th·ªÉ lo·∫°i
                vote_counts = Counter(segment_predictions)
                # S·∫Øp x·∫øp theo s·ªë phi·∫øu gi·∫£m d·∫ßn
                top_votes = vote_counts.most_common()

                # K·∫øt qu·∫£ cu·ªëi c√πng l√† th·ªÉ lo·∫°i c√≥ nhi·ªÅu phi·∫øu nh·∫•t
                final_genre = top_votes[0][0]
                
                # T√≠nh to√°n "ƒë·ªô t·ª± tin" d·ª±a tr√™n t·ª∑ l·ªá phi·∫øu b·∫ßu
                confidence = (top_votes[0][1] / len(segment_predictions)) * 100

                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                emoji = genre_emojis.get(final_genre, '')
                st.markdown(f"### üéØ Th·ªÉ lo·∫°i d·ª± ƒëo√°n: **{final_genre.upper()}** {emoji}")
                st.markdown(f"**üìà ƒê·ªô t·ª± tin (t·ª∑ l·ªá phi·∫øu b·∫ßu):** {confidence:.2f}%")
                
                # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì ph√¢n ph·ªëi phi·∫øu b·∫ßu
                st.markdown("### üìä Ph√¢n ph·ªëi phi·∫øu b·∫ßu theo th·ªÉ lo·∫°i")
                vote_data = {
                    "Th·ªÉ lo·∫°i": [item[0].capitalize() for item in top_votes],
                    "S·ªë phi·∫øu": [item[1] for item in top_votes]
                }
                df_votes = pd.DataFrame(vote_data)
                st.bar_chart(df_votes.set_index("Th·ªÉ lo·∫°i"))

            else:
                st.warning("‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch file audio. File c√≥ th·ªÉ qu√° ng·∫Øn.")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói: {e}")

        # =================================================================
        # M·ªöI: K·∫æT TH√öC KH·ªêI LOGIC
        # =================================================================

        # Optional waveform (gi·ªØ nguy√™n)
        with st.expander("üìà Hi·ªán th·ªã d·∫°ng s√≥ng (to√†n b·ªô b√†i h√°t)"):
            fig, ax = plt.subplots(figsize=(10, 2))
            librosa.display.waveshow(y, sr=sr, ax=ax)
            ax.set_title('Waveform')
            st.pyplot(fig)